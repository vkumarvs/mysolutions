<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>C++ LRU Cache Template: unit_test.h File Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">C++ LRU Cache Template
   &#160;<span id="projectnumber">1.4</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('unit__test_8h.xhtml','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#define-members">Macros</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">unit_test.h File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><a href="unit__test_8h_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:a5f3fe0e0e85d0dc03672f96e5e95856f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a5f3fe0e0e85d0dc03672f96e5e95856f"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="unit__test_8h.xhtml#a5f3fe0e0e85d0dc03672f96e5e95856f">UNIT_TEST_DEFINES</a></td></tr>
<tr class="memdesc:a5f3fe0e0e85d0dc03672f96e5e95856f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Start of inline Unit Test definitions Use this to start the list of unit tests. This should be followed by one or more DEFINE_TEST entries. <br/></td></tr>
<tr class="memitem:ad3bccea4c3142d58fd5510f65503b300"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="unit__test_8h.xhtml#ad3bccea4c3142d58fd5510f65503b300">DEFINE_TEST</a>(test_name)&#160;&#160;&#160;bool unit_test_##test_name (void)</td></tr>
<tr class="memdesc:ad3bccea4c3142d58fd5510f65503b300"><td class="mdescLeft">&#160;</td><td class="mdescRight">Start a new test definition.  <a href="#ad3bccea4c3142d58fd5510f65503b300"></a><br/></td></tr>
<tr class="memitem:a758baec4c57fa6aeaf800e2c631a7d9f"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="unit__test_8h.xhtml#a758baec4c57fa6aeaf800e2c631a7d9f">ADD_TEST</a>(test_name)&#160;&#160;&#160;add_test( &amp;unit_test_##test_name );</td></tr>
<tr class="memdesc:a758baec4c57fa6aeaf800e2c631a7d9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a defined test to test run.  <a href="#a758baec4c57fa6aeaf800e2c631a7d9f"></a><br/></td></tr>
<tr class="memitem:a86b577b8af9cc6df174dc0e2e292c365"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="unit__test_8h.xhtml#a86b577b8af9cc6df174dc0e2e292c365">UNIT_TEST_RUN</a>(suite)</td></tr>
<tr class="memdesc:a86b577b8af9cc6df174dc0e2e292c365"><td class="mdescLeft">&#160;</td><td class="mdescRight">Start a Unit test run section.  <a href="#a86b577b8af9cc6df174dc0e2e292c365"></a><br/></td></tr>
<tr class="memitem:aa37d553e7d644c165c888bed8908de20"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="unit__test_8h.xhtml#aa37d553e7d644c165c888bed8908de20">unit_assert</a>(msg, cond)</td></tr>
<tr class="memdesc:aa37d553e7d644c165c888bed8908de20"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use within a Unit Test to verify a condition.  <a href="#aa37d553e7d644c165c888bed8908de20"></a><br/></td></tr>
<tr class="memitem:aa2a4504968cf4e8abfc7b706106d4084"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="unit__test_8h.xhtml#aa2a4504968cf4e8abfc7b706106d4084">unit_pass</a>()&#160;&#160;&#160;return true;</td></tr>
<tr class="memdesc:aa2a4504968cf4e8abfc7b706106d4084"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use to end a unit test in success.  <a href="#aa2a4504968cf4e8abfc7b706106d4084"></a><br/></td></tr>
<tr class="memitem:a3476c32ea638214246ee65f561b6358b"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="unit__test_8h.xhtml#a3476c32ea638214246ee65f561b6358b">unit_fail</a>()&#160;&#160;&#160;return false;</td></tr>
<tr class="memdesc:a3476c32ea638214246ee65f561b6358b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use to end a unit test in failure.  <a href="#a3476c32ea638214246ee65f561b6358b"></a><br/></td></tr>
<tr class="memitem:a732dd1ba2cfc9163d60e05628b4544dc"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a732dd1ba2cfc9163d60e05628b4544dc"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="unit__test_8h.xhtml#a732dd1ba2cfc9163d60e05628b4544dc">UNIT_TEST_END</a></td></tr>
<tr class="memdesc:a732dd1ba2cfc9163d60e05628b4544dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finish a Unit Test run section. <br/></td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a62a6058fdd96dcd306fba96626b2cc71"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a62a6058fdd96dcd306fba96626b2cc71"></a>
typedef bool(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="unit__test_8h.xhtml#a62a6058fdd96dcd306fba96626b2cc71">test_func</a> )(void)</td></tr>
<tr class="memdesc:a62a6058fdd96dcd306fba96626b2cc71"><td class="mdescLeft">&#160;</td><td class="mdescRight">typedef for unittest functions <br/></td></tr>
<tr class="memitem:a76894e75beeadd2872f2f5909b43e36f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a76894e75beeadd2872f2f5909b43e36f"></a>
typedef std::vector&lt; <a class="el" href="unit__test_8h.xhtml#a62a6058fdd96dcd306fba96626b2cc71">test_func</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="unit__test_8h.xhtml#a76894e75beeadd2872f2f5909b43e36f">test_vector</a></td></tr>
<tr class="memdesc:a76894e75beeadd2872f2f5909b43e36f"><td class="mdescLeft">&#160;</td><td class="mdescRight">typedef for vectors of unittest functions <br/></td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a7f0155f7ecefd56c2380285420e85e05"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="unit__test_8h.xhtml#a7f0155f7ecefd56c2380285420e85e05">cputime</a> (void)</td></tr>
<tr class="memdesc:a7f0155f7ecefd56c2380285420e85e05"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the current CPU time with microsecond accuracy.  <a href="#a7f0155f7ecefd56c2380285420e85e05"></a><br/></td></tr>
<tr class="memitem:abf6a6c3c73f9e087ad15d8ed0ec0ba85"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="unit__test_8h.xhtml#abf6a6c3c73f9e087ad15d8ed0ec0ba85">transactions_per_second</a> (double run_time, unsigned long transactions)</td></tr>
<tr class="memdesc:abf6a6c3c73f9e087ad15d8ed0ec0ba85"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the transactions rate.  <a href="#abf6a6c3c73f9e087ad15d8ed0ec0ba85"></a><br/></td></tr>
<tr class="memitem:a2fdd86314c7b39ab4274a36655e833f1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="unit__test_8h.xhtml#a2fdd86314c7b39ab4274a36655e833f1">print_cputime</a> (const char *msg, double run_time, unsigned long transactions=0)</td></tr>
<tr class="memdesc:a2fdd86314c7b39ab4274a36655e833f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prints to stdout the results of timing an event.  <a href="#a2fdd86314c7b39ab4274a36655e833f1"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Unit Testing framework for C++ </p>
<dl class="section author"><dt>Author:</dt><dd>Patrick Audley </dd></dl>
<dl class="section date"><dt>Date:</dt><dd>December 2004</dd></dl>
<dl class="section user"><dt></dt><dd>See full documentation for this framework in <a class="el" href="unittests01.xhtml">Unit Testing Framework</a> </dd></dl>

<p>Definition in file <a class="el" href="unit__test_8h_source.xhtml">unit_test.h</a>.</p>
</div><hr/><h2>Macro Definition Documentation</h2>
<a class="anchor" id="ad3bccea4c3142d58fd5510f65503b300"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define DEFINE_TEST</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">test_name</td><td>)</td>
          <td>&#160;&#160;&#160;bool unit_test_##test_name (void)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Start a new test definition. </p>
<dl class="params"><dt>Parameters:</dt><dd>
  <table class="params">
    <tr><td class="paramname">test_name</td><td>Name of the test - must be unique in this unit test suite. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="unit__test_8h_source.xhtml#l00184">184</a> of file <a class="el" href="unit__test_8h_source.xhtml">unit_test.h</a>.</p>

</div>
</div>
<a class="anchor" id="a758baec4c57fa6aeaf800e2c631a7d9f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define ADD_TEST</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">test_name</td><td>)</td>
          <td>&#160;&#160;&#160;add_test( &amp;unit_test_##test_name );</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adds a defined test to test run. </p>
<dl class="params"><dt>Parameters:</dt><dd>
  <table class="params">
    <tr><td class="paramname">test_name</td><td>Test name of a previously defined test to add the the current suite. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section see"><dt>See also:</dt><dd><a class="el" href="lru__cache_8cpp.xhtml#a7403186cac9b12671fdda33ea88bceb0">DEFINE_TEST</a> <a class="el" href="unit__test_8h.xhtml#a86b577b8af9cc6df174dc0e2e292c365" title="Start a Unit test run section.">UNIT_TEST_RUN</a> This should be called after <a class="el" href="unit__test_8h.xhtml#a86b577b8af9cc6df174dc0e2e292c365" title="Start a Unit test run section.">UNIT_TEST_RUN</a> for each defined test. </dd></dl>

<p>Definition at line <a class="el" href="unit__test_8h_source.xhtml#l00191">191</a> of file <a class="el" href="unit__test_8h_source.xhtml">unit_test.h</a>.</p>

</div>
</div>
<a class="anchor" id="a86b577b8af9cc6df174dc0e2e292c365"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define UNIT_TEST_RUN</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">suite</td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line"><span class="keywordtype">int</span> main(<span class="keywordtype">void</span>) { \</div>
<div class="line">  bool result = <span class="keyword">true</span>; \</div>
<div class="line">  std::cout &lt;&lt; <span class="stringliteral">&quot;---[ &quot;</span> &lt;&lt; suite &lt;&lt; <span class="stringliteral">&quot; ]--- &quot;</span> &lt;&lt; std::endl;</div>
</div><!-- fragment -->
<p>Start a Unit test run section. </p>
<dl class="params"><dt>Parameters:</dt><dd>
  <table class="params">
    <tr><td class="paramname">suite</td><td>Name for this test suite. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note:</dt><dd>Must be terminated with an UNIT_TEST_END statement. </dd></dl>

<p>Definition at line <a class="el" href="unit__test_8h_source.xhtml#l00197">197</a> of file <a class="el" href="unit__test_8h_source.xhtml">unit_test.h</a>.</p>

</div>
</div>
<a class="anchor" id="aa37d553e7d644c165c888bed8908de20"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define unit_assert</td>
          <td>(</td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">msg, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&#160;</td>
          <td class="paramname">cond&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Value:</b><div class="fragment"><div class="line">std::cout &lt;&lt; <span class="stringliteral">&quot;  &quot;</span> &lt;&lt; msg &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; std::flush; \</div>
<div class="line">  if( !cond ) { std::cout &lt;&lt; <span class="stringliteral">&quot;FAILED&quot;</span> &lt;&lt; std::endl; <span class="keywordflow">return</span> <span class="keyword">false</span>; } \</div>
<div class="line">  std::cout &lt;&lt; <span class="stringliteral">&quot;PASSED&quot;</span> &lt;&lt; std::endl;</div>
</div><!-- fragment -->
<p>Use within a Unit Test to verify a condition. </p>
<dl class="section warning"><dt>Warning:</dt><dd>Terminates test on failure. </dd></dl>

<p>Definition at line <a class="el" href="unit__test_8h_source.xhtml#l00205">205</a> of file <a class="el" href="unit__test_8h_source.xhtml">unit_test.h</a>.</p>

<p>Referenced by <a class="el" href="lru__cache_8cpp_source.xhtml#l00050">DEFINE_TEST()</a>.</p>

</div>
</div>
<a class="anchor" id="aa2a4504968cf4e8abfc7b706106d4084"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define unit_pass</td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>&#160;&#160;&#160;return true;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Use to end a unit test in success. </p>
<dl class="section note"><dt>Note:</dt><dd>Either unit_pass or unit_fail should end every test. </dd></dl>

<p>Definition at line <a class="el" href="unit__test_8h_source.xhtml#l00213">213</a> of file <a class="el" href="unit__test_8h_source.xhtml">unit_test.h</a>.</p>

<p>Referenced by <a class="el" href="lru__cache_8cpp_source.xhtml#l00050">DEFINE_TEST()</a>.</p>

</div>
</div>
<a class="anchor" id="a3476c32ea638214246ee65f561b6358b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define unit_fail</td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td>&#160;&#160;&#160;return false;</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Use to end a unit test in failure. </p>
<dl class="section note"><dt>Note:</dt><dd>Either unit_pass or unit_fail should end every test. </dd></dl>

<p>Definition at line <a class="el" href="unit__test_8h_source.xhtml#l00218">218</a> of file <a class="el" href="unit__test_8h_source.xhtml">unit_test.h</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a7f0155f7ecefd56c2380285420e85e05"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double cputime </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the current CPU time with microsecond accuracy. </p>
<dl class="section return"><dt>Returns:</dt><dd>microseconds since UNIX epoch </dd></dl>

<p>Definition at line <a class="el" href="unit__test_8h_source.xhtml#l00139">139</a> of file <a class="el" href="unit__test_8h_source.xhtml">unit_test.h</a>.</p>

<p>Referenced by <a class="el" href="lru__cache_8cpp_source.xhtml#l00129">DEFINE_TEST()</a>.</p>
<div class="fragment"><div class="line">                              {</div>
<div class="line">  getrusage( RUSAGE_SELF, &amp;ruse );</div>
<div class="line">        <span class="keywordflow">return</span> ( ruse.ru_utime.tv_sec + ruse.ru_stime.tv_sec + 1e-6 * (ruse.ru_utime.tv_usec + ruse.ru_stime.tv_usec ) );</div>
<div class="line">}</div>
</div><!-- fragment -->
<p><div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="unit__test_8h_a7f0155f7ecefd56c2380285420e85e05_icgraph.svg" width="240" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="abf6a6c3c73f9e087ad15d8ed0ec0ba85"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double transactions_per_second </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>run_time</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>transactions</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calculates the transactions rate. </p>
<dl class="params"><dt>Parameters:</dt><dd>
  <table class="params">
    <tr><td class="paramname">run_time</td><td>microsecond resolution run time </td></tr>
    <tr><td class="paramname">transactions</td><td>number of transactions handled in run_time seconds This is useful if you want to guarantee minimun transactional throughputs in unit tests. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section warning"><dt>Warning:</dt><dd>This code is obviously very test platform dependent. </dd></dl>

<p>Definition at line <a class="el" href="unit__test_8h_source.xhtml#l00149">149</a> of file <a class="el" href="unit__test_8h_source.xhtml">unit_test.h</a>.</p>

<p>Referenced by <a class="el" href="unit__test_8h_source.xhtml#l00158">print_cputime()</a>.</p>
<div class="fragment"><div class="line">                                                                                     {</div>
<div class="line">        <span class="keywordflow">return</span> (<span class="keywordtype">double</span>)transactions / run_time;</div>
<div class="line">}</div>
</div><!-- fragment -->
<p><div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="unit__test_8h_abf6a6c3c73f9e087ad15d8ed0ec0ba85_icgraph.svg" width="491" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a2fdd86314c7b39ab4274a36655e833f1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void print_cputime </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>msg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>run_time</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned long&#160;</td>
          <td class="paramname"><em>transactions</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prints to stdout the results of timing an event. </p>
<dl class="params"><dt>Parameters:</dt><dd>
  <table class="params">
    <tr><td class="paramname">msg</td><td>to print with the numbers </td></tr>
    <tr><td class="paramname">run_time</td><td>microsecond resolution run time </td></tr>
    <tr><td class="paramname">transactions</td><td>number of transactions handled in run_time seconds, if 0 then transactional output is suppressed </td></tr>
  </table>
  </dd>
</dl>
<dl class="section warning"><dt>Warning:</dt><dd>This code is obviously very test platform dependent. </dd></dl>

<p>Definition at line <a class="el" href="unit__test_8h_source.xhtml#l00158">158</a> of file <a class="el" href="unit__test_8h_source.xhtml">unit_test.h</a>.</p>

<p>References <a class="el" href="unit__test_8h_source.xhtml#l00149">transactions_per_second()</a>.</p>

<p>Referenced by <a class="el" href="lru__cache_8cpp_source.xhtml#l00129">DEFINE_TEST()</a>.</p>
<div class="fragment"><div class="line">                                                                                              {</div>
<div class="line">        printf(<span class="stringliteral">&quot;  -&gt; %s:  %7.3f seconds CPU time&quot;</span>, msg, run_time );</div>
<div class="line">        <span class="keywordflow">if</span>( transactions != 0 )</div>
<div class="line">                printf( <span class="stringliteral">&quot;  (%7.3f transactions/second)&quot;</span>, <a class="code" href="unit__test_8h.xhtml#abf6a6c3c73f9e087ad15d8ed0ec0ba85" title="Calculates the transactions rate.">transactions_per_second</a>( run_time, transactions ) );</div>
<div class="line">        printf( <span class="stringliteral">&quot;\n&quot;</span> );</div>
<div class="line">}</div>
</div><!-- fragment -->
<p><div class="dynheader">
Here is the call graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="unit__test_8h_a2fdd86314c7b39ab4274a36655e833f1_cgraph.svg" width="331" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

<p><div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="unit__test_8h_a2fdd86314c7b39ab4274a36655e833f1_icgraph.svg" width="272" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li><li class="navelem"><a class="el" href="unit__test_8h.xhtml">unit_test.h</a></li>
    <li class="footer">Generated on Sun Jun 10 2012 22:36:56 for C++ LRU Cache Template by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.1 </li>
  </ul>
</div>
</body>
</html>

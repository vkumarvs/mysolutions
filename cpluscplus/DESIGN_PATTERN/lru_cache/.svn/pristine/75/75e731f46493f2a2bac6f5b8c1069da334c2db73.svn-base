<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>C++ LRU Cache Template: Unit Testing Framework</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">C++ LRU Cache Template
   &#160;<span id="projectnumber">1.4</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li class="current"><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('unittests01.xhtml','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">Unit Testing Framework </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>See implementation in <a class="el" href="unit__test_8h.xhtml">unit_test.h</a></p>
<dl class="section user"><dt></dt><dd></dd></dl>
<h1><a class="anchor" id="writing"></a>
Writing Unit Tests</h1>
<dl class="section user"><dt></dt><dd>Ideally, unit tests are written with the code they test. The easiest way to do this is to include all the unit tests at the bottom of each source that they relate too. It's also possible to create source files of nothing but tests to expand coverage across multiple translation modules. </dd></dl>
<dl class="section user"><dt></dt><dd>Let's take a simple example: we have a new function that adds two numbers. <div class="fragment"><div class="line"> <span class="keywordtype">int</span> addTwoNumbers( <span class="keywordtype">int</span> a, <span class="keywordtype">int</span> b ) {</div>
<div class="line">   <span class="keywordflow">return</span> a + b;</div>
<div class="line"> }</div>
</div><!-- fragment --> To write a unit test that checks that <img class="formulaInl" alt="$addTwoNumbers(x_1,x_2)=x_1+x_2$" src="form_0.png"/> we would write the unit test like so: <div class="fragment"><div class="line"><span class="preprocessor"> #ifdef UNITTEST</span></div>
<div class="line"><span class="preprocessor"></span><span class="preprocessor"> #include &quot;<a class="code" href="unit__test_8h.xhtml">unit_test.h</a>&quot;</span></div>
<div class="line"></div>
<div class="line"> <a class="code" href="unit__test_8h.xhtml#a5f3fe0e0e85d0dc03672f96e5e95856f" title="Start of inline Unit Test definitions Use this to start the list of unit tests. This should be follow...">UNIT_TEST_DEFINES</a></div>
<div class="line"></div>
<div class="line"> <a class="code" href="unit__test_8h.xhtml#ad3bccea4c3142d58fd5510f65503b300" title="Start a new test definition.">DEFINE_TEST</a>( check_two_plus_two ) {</div>
<div class="line">   <a class="code" href="unit__test_8h.xhtml#aa37d553e7d644c165c888bed8908de20" title="Use within a Unit Test to verify a condition.">unit_assert</a>( <span class="stringliteral">&quot;2+2=4&quot;</span>, addTwoNumbers(2,2)==4 );</div>
<div class="line"> }</div>
<div class="line"></div>
<div class="line"> <a class="code" href="unit__test_8h.xhtml#a86b577b8af9cc6df174dc0e2e292c365" title="Start a Unit test run section.">UNIT_TEST_RUN</a>( <span class="stringliteral">&quot;addTwoNumbers Tests&quot;</span> )</div>
<div class="line">   <a class="code" href="unit__test_8h.xhtml#a758baec4c57fa6aeaf800e2c631a7d9f" title="Adds a defined test to test run.">ADD_TEST</a>( check_two_plus_two )</div>
<div class="line"> <a class="code" href="unit__test_8h.xhtml#a732dd1ba2cfc9163d60e05628b4544dc" title="Finish a Unit Test run section.">UNIT_TEST_END</a></div>
<div class="line"></div>
<div class="line"> <span class="preprocessor">#endif // UNITTEST</span></div>
</div><!-- fragment --> </dd></dl>
<dl class="section user"><dt></dt><dd>Now we have a test suite defined that will only be compiled when we define UNITTEST. UNIT_TEST_RUN actually creates a main() function that runs the tests so if we put this code into a file (say add.cpp) then we can compile and run it like so: <pre class="fragment"># gcc -DUNITTEST -o unit_test_add add.cpp
# ./unit_test_add
---[ addTwoNumbers Tests ]---
  2+2=4: PASSED
</pre> </dd></dl>
<dl class="section user"><dt></dt><dd>So far so good, let's add a new test that we think will fail. <div class="fragment"><div class="line"><span class="preprocessor"> #ifdef UNITTEST</span></div>
<div class="line"><span class="preprocessor"></span><span class="preprocessor"> #include &quot;<a class="code" href="unit__test_8h.xhtml">unit_test.h</a>&quot;</span></div>
<div class="line"></div>
<div class="line"> <a class="code" href="unit__test_8h.xhtml#a5f3fe0e0e85d0dc03672f96e5e95856f" title="Start of inline Unit Test definitions Use this to start the list of unit tests. This should be follow...">UNIT_TEST_DEFINES</a></div>
<div class="line"></div>
<div class="line"> <a class="code" href="unit__test_8h.xhtml#ad3bccea4c3142d58fd5510f65503b300" title="Start a new test definition.">DEFINE_TEST</a>( check_two_plus_two ) {</div>
<div class="line">   <a class="code" href="unit__test_8h.xhtml#aa37d553e7d644c165c888bed8908de20" title="Use within a Unit Test to verify a condition.">unit_assert</a>( <span class="stringliteral">&quot;2+2=4&quot;</span>, addTwoNumbers(2,2)==4 );</div>
<div class="line">   <a class="code" href="unit__test_8h.xhtml#aa2a4504968cf4e8abfc7b706106d4084" title="Use to end a unit test in success.">unit_pass</a>();</div>
<div class="line"> }</div>
<div class="line"></div>
<div class="line"> <a class="code" href="unit__test_8h.xhtml#ad3bccea4c3142d58fd5510f65503b300" title="Start a new test definition.">DEFINE_TEST</a>( check_bogus ) {</div>
<div class="line">   <a class="code" href="unit__test_8h.xhtml#aa37d553e7d644c165c888bed8908de20" title="Use within a Unit Test to verify a condition.">unit_assert</a>( <span class="stringliteral">&quot;1+5=9&quot;</span>, addTwoNumbers(1,5)==9 );</div>
<div class="line">   <a class="code" href="unit__test_8h.xhtml#aa2a4504968cf4e8abfc7b706106d4084" title="Use to end a unit test in success.">unit_pass</a>();</div>
<div class="line"> }</div>
<div class="line"></div>
<div class="line"> <a class="code" href="unit__test_8h.xhtml#a86b577b8af9cc6df174dc0e2e292c365" title="Start a Unit test run section.">UNIT_TEST_RUN</a>( <span class="stringliteral">&quot;addTwoNumbers Tests&quot;</span> )</div>
<div class="line">   <a class="code" href="unit__test_8h.xhtml#a758baec4c57fa6aeaf800e2c631a7d9f" title="Adds a defined test to test run.">ADD_TEST</a>( check_negatives )</div>
<div class="line"> <a class="code" href="unit__test_8h.xhtml#a732dd1ba2cfc9163d60e05628b4544dc" title="Finish a Unit Test run section.">UNIT_TEST_END</a></div>
<div class="line"></div>
<div class="line"> <span class="preprocessor">#endif // UNITTEST</span></div>
</div><!-- fragment --> Running the unit_test now we get: <pre class="fragment"># gcc -DUNITTEST -o unit_test_add add.cpp
# ./unit_test_add
---[ addTwoNumbers Tests ]---
  2+2=4: PASSED
  1+5=9: FAILED
</pre> </dd></dl>
<dl class="section user"><dt></dt><dd></dd></dl>
<h1><a class="anchor" id="adding"></a>
Integrating with Automake</h1>
<dl class="section user"><dt></dt><dd>Automake has the ability to define testing targets that get run when issue "make check" command. Adding these tests are pretty straight forward. For the above we would add this to our Makefile.am: <pre class="fragment">TESTS = unit_test_add
noinst_PROGRAMS = unit_test_add
CLEANFILES = add_unit.cpp
unit_test_add_SOURCES = add_unit.cpp

%_unit.cpp: %.cpp
        $(CXX) -E -o $*_unit.cpp $*.C @CFLAGS@ -DUNITTEST=1
</pre> To add addtional unit tests you just modify the first four lines. For example: to add a new unit test suite in the file sub.C we might do this. <pre class="fragment">TESTS = unit_test_add unit_test_sub
noinst_PROGRAMS = unit_test_add unit_test_sub
CLEANFILES = add_unit.cpp sub_unit.cpp
unit_test_add_SOURCES = add_unit.cpp
unit_test_sub_SOURCES = sub_unit.cpp
</pre> </dd></dl>
<h1><a class="anchor" id="Notes"></a>
Implementation Notes</h1>
<dl class="section user"><dt></dt><dd></dd></dl>
</div></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Sun Jun 10 2012 22:36:56 for C++ LRU Cache Template by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.1 </li>
  </ul>
</div>
</body>
</html>

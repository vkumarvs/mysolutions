<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>C++ LRU Cache Template: LRUCache&lt; Key, Data, Sizefn &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">C++ LRU Cache Template
   &#160;<span id="projectnumber">1.4</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.1 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li><a href="examples.xhtml"><span>Examples</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('classLRUCache.xhtml','');});
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">LRUCache&lt; Key, Data, Sizefn &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Template cache with an LRU removal policy.  
 <a href="classLRUCache.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="lru__cache_8h_source.xhtml">lru_cache.h</a>&gt;</code></p>
<div class="dynheader">
Collaboration diagram for LRUCache&lt; Key, Data, Sizefn &gt;:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classLRUCache__coll__graph.svg" width="168" height="270"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>

<p><a href="classLRUCache-members.xhtml">List of all members.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:ad0c8ac49227b80937fa8f6a2edd8d67f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad0c8ac49227b80937fa8f6a2edd8d67f"></a>
typedef std::list&lt; std::pair<br class="typebreak"/>
&lt; Key, Data &gt; &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLRUCache.xhtml#ad0c8ac49227b80937fa8f6a2edd8d67f">List</a></td></tr>
<tr class="memdesc:ad0c8ac49227b80937fa8f6a2edd8d67f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Main cache storage typedef. <br/></td></tr>
<tr class="memitem:a3c656ba5944009b260049c8a67e42037"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3c656ba5944009b260049c8a67e42037"></a>
typedef List::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLRUCache.xhtml#a3c656ba5944009b260049c8a67e42037">List_Iter</a></td></tr>
<tr class="memdesc:a3c656ba5944009b260049c8a67e42037"><td class="mdescLeft">&#160;</td><td class="mdescRight">Main cache iterator. <br/></td></tr>
<tr class="memitem:a7a9d5fc54bec471ff96c5aefab17acf9"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7a9d5fc54bec471ff96c5aefab17acf9"></a>
typedef List::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLRUCache.xhtml#a7a9d5fc54bec471ff96c5aefab17acf9">List_cIter</a></td></tr>
<tr class="memdesc:a7a9d5fc54bec471ff96c5aefab17acf9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Main cache iterator (const) <br/></td></tr>
<tr class="memitem:aaa32d864b92c5bb8df559b363a69cf21"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aaa32d864b92c5bb8df559b363a69cf21"></a>
typedef std::vector&lt; Key &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLRUCache.xhtml#aaa32d864b92c5bb8df559b363a69cf21">Key_List</a></td></tr>
<tr class="memdesc:aaa32d864b92c5bb8df559b363a69cf21"><td class="mdescLeft">&#160;</td><td class="mdescRight">List of keys. <br/></td></tr>
<tr class="memitem:a2504cf65d69d046d4010a4102e2c17c8"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2504cf65d69d046d4010a4102e2c17c8"></a>
typedef Key_List::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLRUCache.xhtml#a2504cf65d69d046d4010a4102e2c17c8">Key_List_Iter</a></td></tr>
<tr class="memdesc:a2504cf65d69d046d4010a4102e2c17c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Main cache iterator. <br/></td></tr>
<tr class="memitem:a5bfc5b2fb49045d46214f92e8019307f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a5bfc5b2fb49045d46214f92e8019307f"></a>
typedef Key_List::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLRUCache.xhtml#a5bfc5b2fb49045d46214f92e8019307f">Key_List_cIter</a></td></tr>
<tr class="memdesc:a5bfc5b2fb49045d46214f92e8019307f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Main cache iterator (const) <br/></td></tr>
<tr class="memitem:acf7b527935fba37e33b8f2e6de92bfb0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="acf7b527935fba37e33b8f2e6de92bfb0"></a>
typedef std::map&lt; Key, <a class="el" href="classLRUCache.xhtml#a3c656ba5944009b260049c8a67e42037">List_Iter</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLRUCache.xhtml#acf7b527935fba37e33b8f2e6de92bfb0">Map</a></td></tr>
<tr class="memdesc:acf7b527935fba37e33b8f2e6de92bfb0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Index typedef. <br/></td></tr>
<tr class="memitem:aa10db4fd28c9946c2ef845e2f56c48bf"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa10db4fd28c9946c2ef845e2f56c48bf"></a>
typedef std::pair&lt; Key, <a class="el" href="classLRUCache.xhtml#a3c656ba5944009b260049c8a67e42037">List_Iter</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLRUCache.xhtml#aa10db4fd28c9946c2ef845e2f56c48bf">Pair</a></td></tr>
<tr class="memdesc:aa10db4fd28c9946c2ef845e2f56c48bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pair of Map elements. <br/></td></tr>
<tr class="memitem:aa95c01d582d31a9295b84caf12d42ef4"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa95c01d582d31a9295b84caf12d42ef4"></a>
typedef Map::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLRUCache.xhtml#aa95c01d582d31a9295b84caf12d42ef4">Map_Iter</a></td></tr>
<tr class="memdesc:aa95c01d582d31a9295b84caf12d42ef4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Index iterator. <br/></td></tr>
<tr class="memitem:a77cae4f619439bdf7cb7098ed87c3583"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a77cae4f619439bdf7cb7098ed87c3583"></a>
typedef Map::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLRUCache.xhtml#a77cae4f619439bdf7cb7098ed87c3583">Map_cIter</a></td></tr>
<tr class="memdesc:a77cae4f619439bdf7cb7098ed87c3583"><td class="mdescLeft">&#160;</td><td class="mdescRight">Index iterator (const) <br/></td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a814a6e3b186cc44a7787bade5f3a752b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLRUCache.xhtml#a814a6e3b186cc44a7787bade5f3a752b">LRUCache</a> (const unsigned long Size)</td></tr>
<tr class="memdesc:a814a6e3b186cc44a7787bade5f3a752b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a cache that holds at most Size worth of elements.  <a href="#a814a6e3b186cc44a7787bade5f3a752b"></a><br/></td></tr>
<tr class="memitem:a64ae7e7d3ea41f536abcd7c40033d2a5"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a64ae7e7d3ea41f536abcd7c40033d2a5"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLRUCache.xhtml#a64ae7e7d3ea41f536abcd7c40033d2a5">~LRUCache</a> ()</td></tr>
<tr class="memdesc:a64ae7e7d3ea41f536abcd7c40033d2a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor - cleans up both index and storage. <br/></td></tr>
<tr class="memitem:a3a521aa7646757957a53850db90ad289"><td class="memItemLeft" align="right" valign="top">const unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLRUCache.xhtml#a3a521aa7646757957a53850db90ad289">size</a> (void) const </td></tr>
<tr class="memdesc:a3a521aa7646757957a53850db90ad289"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the current abstract size of the cache.  <a href="#a3a521aa7646757957a53850db90ad289"></a><br/></td></tr>
<tr class="memitem:a3b625a8778e0dc1e5e69da3c331b9751"><td class="memItemLeft" align="right" valign="top">const unsigned long&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLRUCache.xhtml#a3b625a8778e0dc1e5e69da3c331b9751">max_size</a> (void) const </td></tr>
<tr class="memdesc:a3b625a8778e0dc1e5e69da3c331b9751"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the maximum sbstract size of the cache.  <a href="#a3b625a8778e0dc1e5e69da3c331b9751"></a><br/></td></tr>
<tr class="memitem:ad59b44b509fcef46b3666695c5e4a1aa"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad59b44b509fcef46b3666695c5e4a1aa"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLRUCache.xhtml#ad59b44b509fcef46b3666695c5e4a1aa">clear</a> (void)</td></tr>
<tr class="memdesc:ad59b44b509fcef46b3666695c5e4a1aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clears all storage and indices. <br/></td></tr>
<tr class="memitem:aa095f7527b11c4fb1bfad28bc06c91a6"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLRUCache.xhtml#aa095f7527b11c4fb1bfad28bc06c91a6">exists</a> (const Key &amp;key)</td></tr>
<tr class="memdesc:aa095f7527b11c4fb1bfad28bc06c91a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks for the existance of a key in the cache.  <a href="#aa095f7527b11c4fb1bfad28bc06c91a6"></a><br/></td></tr>
<tr class="memitem:a34e974cf87c08620131a9b006443e93b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLRUCache.xhtml#a34e974cf87c08620131a9b006443e93b">remove</a> (const Key &amp;key)</td></tr>
<tr class="memdesc:a34e974cf87c08620131a9b006443e93b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes a key-data pair from the cache.  <a href="#a34e974cf87c08620131a9b006443e93b"></a><br/></td></tr>
<tr class="memitem:a844206e9e2fde04aaf11c638725f2c29"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLRUCache.xhtml#a844206e9e2fde04aaf11c638725f2c29">touch</a> (const Key &amp;key)</td></tr>
<tr class="memdesc:a844206e9e2fde04aaf11c638725f2c29"><td class="mdescLeft">&#160;</td><td class="mdescRight">Touches a key in the Cache and makes it the most recently used.  <a href="#a844206e9e2fde04aaf11c638725f2c29"></a><br/></td></tr>
<tr class="memitem:a8531c23ed890dac39debfb9f878cab9d"><td class="memItemLeft" align="right" valign="top">Data *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLRUCache.xhtml#a8531c23ed890dac39debfb9f878cab9d">fetch_ptr</a> (const Key &amp;key, bool <a class="el" href="classLRUCache.xhtml#a844206e9e2fde04aaf11c638725f2c29">touch</a>=true)</td></tr>
<tr class="memdesc:a8531c23ed890dac39debfb9f878cab9d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fetches a pointer to cache data.  <a href="#a8531c23ed890dac39debfb9f878cab9d"></a><br/></td></tr>
<tr class="memitem:a5896c9481fb649f5570fb8677c33b49c"><td class="memItemLeft" align="right" valign="top">Data&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLRUCache.xhtml#a5896c9481fb649f5570fb8677c33b49c">fetch</a> (const Key &amp;key, bool touch_data=true)</td></tr>
<tr class="memdesc:a5896c9481fb649f5570fb8677c33b49c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fetches a copy of cached data.  <a href="#a5896c9481fb649f5570fb8677c33b49c"></a><br/></td></tr>
<tr class="memitem:a85c5cb904b7c8ed7f85a6a7162740aa5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLRUCache.xhtml#a85c5cb904b7c8ed7f85a6a7162740aa5">fetch</a> (const Key &amp;key, Data &amp;data, bool touch_data=true)</td></tr>
<tr class="memdesc:a85c5cb904b7c8ed7f85a6a7162740aa5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fetches a pointer to cache data.  <a href="#a85c5cb904b7c8ed7f85a6a7162740aa5"></a><br/></td></tr>
<tr class="memitem:a47523c87a56e9bd718566b2659366fd1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLRUCache.xhtml#a47523c87a56e9bd718566b2659366fd1">insert</a> (const Key &amp;key, const Data &amp;data)</td></tr>
<tr class="memdesc:a47523c87a56e9bd718566b2659366fd1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inserts a key-data pair into the cache and removes entries if neccessary.  <a href="#a47523c87a56e9bd718566b2659366fd1"></a><br/></td></tr>
<tr class="memitem:a3ca261ee9025168c081883b6dacc4131"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classLRUCache.xhtml#aaa32d864b92c5bb8df559b363a69cf21">Key_List</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLRUCache.xhtml#a3ca261ee9025168c081883b6dacc4131">get_all_keys</a> (void)</td></tr>
<tr class="memdesc:a3ca261ee9025168c081883b6dacc4131"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a list of keys.  <a href="#a3ca261ee9025168c081883b6dacc4131"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><h3>template&lt;class Key, class Data, class Sizefn = Countfn&lt; Data &gt;&gt;<br/>
class LRUCache&lt; Key, Data, Sizefn &gt;</h3>

<p>Template cache with an LRU removal policy. </p>
<dl class="section user"><dt></dt><dd>This template creats a simple collection of key-value pairs that grows until the size specified at construction is reached and then begins discard the Least Recently Used element on each insertion. </dd></dl>
<dl><dt><b>Examples: </b></dt><dd><a class="el" href="lru_example_8cpp-example.xhtml#_a0">lru_example.cpp</a>.</dd>
</dl>
<p>Definition at line <a class="el" href="lru__cache_8h_source.xhtml#l00074">74</a> of file <a class="el" href="lru__cache_8h_source.xhtml">lru_cache.h</a>.</p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a814a6e3b186cc44a7787bade5f3a752b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class Data , class Sizefn  = Countfn&lt; Data &gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classLRUCache.xhtml">LRUCache</a>&lt; Key, Data, Sizefn &gt;::<a class="el" href="classLRUCache.xhtml">LRUCache</a> </td>
          <td>(</td>
          <td class="paramtype">const unsigned long&#160;</td>
          <td class="paramname"><em>Size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a cache that holds at most Size worth of elements. </p>
<dl class="params"><dt>Parameters:</dt><dd>
  <table class="params">
    <tr><td class="paramname">Size</td><td>maximum size of cache </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="lru__cache_8h_source.xhtml#l00102">102</a> of file <a class="el" href="lru__cache_8h_source.xhtml">lru_cache.h</a>.</p>
<div class="fragment"><div class="line">                                                     :</div>
<div class="line">                                _max_size( Size ),</div>
<div class="line">                                _curr_size( 0 )</div>
                         {}</div>
</div><!-- fragment -->
</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a3a521aa7646757957a53850db90ad289"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class Data , class Sizefn  = Countfn&lt; Data &gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned long <a class="el" href="classLRUCache.xhtml">LRUCache</a>&lt; Key, Data, Sizefn &gt;::size </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the current abstract size of the cache. </p>
<dl class="section return"><dt>Returns:</dt><dd>current size </dd></dl>

<p>Definition at line <a class="el" href="lru__cache_8h_source.xhtml#l00113">113</a> of file <a class="el" href="lru__cache_8h_source.xhtml">lru_cache.h</a>.</p>

<p>Referenced by <a class="el" href="lru__cache_8cpp_source.xhtml#l00050">DEFINE_TEST()</a>.</p>
<div class="fragment"><div class="line">{ <span class="keywordflow">return</span> _curr_size; }</div>
</div><!-- fragment -->
<p><div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classLRUCache_a3a521aa7646757957a53850db90ad289_icgraph.svg" width="288" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a3b625a8778e0dc1e5e69da3c331b9751"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class Data , class Sizefn  = Countfn&lt; Data &gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const unsigned long <a class="el" href="classLRUCache.xhtml">LRUCache</a>&lt; Key, Data, Sizefn &gt;::max_size </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the maximum sbstract size of the cache. </p>
<dl class="section return"><dt>Returns:</dt><dd>maximum size </dd></dl>

<p>Definition at line <a class="el" href="lru__cache_8h_source.xhtml#l00118">118</a> of file <a class="el" href="lru__cache_8h_source.xhtml">lru_cache.h</a>.</p>

<p>Referenced by <a class="el" href="lru__cache_8cpp_source.xhtml#l00050">DEFINE_TEST()</a>.</p>
<div class="fragment"><div class="line">{ <span class="keywordflow">return</span> _max_size; }</div>
</div><!-- fragment -->
<p><div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classLRUCache_a3b625a8778e0dc1e5e69da3c331b9751_icgraph.svg" width="323" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="aa095f7527b11c4fb1bfad28bc06c91a6"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class Data , class Sizefn  = Countfn&lt; Data &gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classLRUCache.xhtml">LRUCache</a>&lt; Key, Data, Sizefn &gt;::exists </td>
          <td>(</td>
          <td class="paramtype">const Key &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks for the existance of a key in the cache. </p>
<dl class="params"><dt>Parameters:</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>to check for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns:</dt><dd>bool indicating whether or not the key was found. </dd></dl>

<p>Definition at line <a class="el" href="lru__cache_8h_source.xhtml#l00133">133</a> of file <a class="el" href="lru__cache_8h_source.xhtml">lru_cache.h</a>.</p>

<p>References <a class="el" href="lru__cache_8h_source.xhtml#l00052">SCOPED_MUTEX</a>.</p>

<p>Referenced by <a class="el" href="lru__cache_8cpp_source.xhtml#l00050">DEFINE_TEST()</a>.</p>
<div class="fragment"><div class="line">                                                     {</div>
<div class="line">                        <a class="code" href="lru__cache_8h.xhtml#a7a1d17c8eef1fd310a6522744483ae52" title="If we are reentrant then use a BOOST scoped mutex where neccessary.">SCOPED_MUTEX</a>;</div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line"><span class="preprocessor"></span>                <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classLRUCache.xhtml#aa095f7527b11c4fb1bfad28bc06c91a6" title="Checks for the existance of a key in the cache.">exists</a>( <span class="keyword">const</span> Key &amp;key )<span class="keyword"> const </span>{</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"><span class="preprocessor"></span>                        <span class="keywordflow">return</span> _index.find( key ) != _index.end();</div>
<div class="line">                }</div>
</div><!-- fragment -->
<p><div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classLRUCache_aa095f7527b11c4fb1bfad28bc06c91a6_icgraph.svg" width="299" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a34e974cf87c08620131a9b006443e93b"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class Data , class Sizefn  = Countfn&lt; Data &gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classLRUCache.xhtml">LRUCache</a>&lt; Key, Data, Sizefn &gt;::remove </td>
          <td>(</td>
          <td class="paramtype">const Key &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Removes a key-data pair from the cache. </p>
<dl class="params"><dt>Parameters:</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>to be removed </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="lru__cache_8h_source.xhtml#l00144">144</a> of file <a class="el" href="lru__cache_8h_source.xhtml">lru_cache.h</a>.</p>

<p>References <a class="el" href="lru__cache_8h_source.xhtml#l00052">SCOPED_MUTEX</a>.</p>

<p>Referenced by <a class="el" href="lru__cache_8cpp_source.xhtml#l00050">DEFINE_TEST()</a>.</p>
<div class="fragment"><div class="line">                                                     {</div>
<div class="line"><span class="preprocessor">#ifdef _REENTRANT</span></div>
<div class="line"><span class="preprocessor"></span>                        <a class="code" href="lru__cache_8h.xhtml#a7a1d17c8eef1fd310a6522744483ae52" title="If we are reentrant then use a BOOST scoped mutex where neccessary.">SCOPED_MUTEX</a>;</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"><span class="preprocessor"></span>                        <a class="code" href="classLRUCache.xhtml#aa95c01d582d31a9295b84caf12d42ef4" title="Index iterator.">Map_Iter</a> miter = _index.find( key );</div>
<div class="line">                        <span class="keywordflow">if</span>( miter == _index.end() ) <span class="keywordflow">return</span>;</div>
<div class="line">                        _remove( miter );</div>
<div class="line">                }</div>
</div><!-- fragment -->
<p><div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classLRUCache_a34e974cf87c08620131a9b006443e93b_icgraph.svg" width="310" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a844206e9e2fde04aaf11c638725f2c29"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class Data , class Sizefn  = Countfn&lt; Data &gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classLRUCache.xhtml">LRUCache</a>&lt; Key, Data, Sizefn &gt;::touch </td>
          <td>(</td>
          <td class="paramtype">const Key &amp;&#160;</td>
          <td class="paramname"><em>key</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Touches a key in the Cache and makes it the most recently used. </p>
<dl class="params"><dt>Parameters:</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>to be touched </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="lru__cache_8h_source.xhtml#l00156">156</a> of file <a class="el" href="lru__cache_8h_source.xhtml">lru_cache.h</a>.</p>

<p>References <a class="el" href="lru__cache_8h_source.xhtml#l00052">SCOPED_MUTEX</a>.</p>

<p>Referenced by <a class="el" href="lru__cache_8cpp_source.xhtml#l00050">DEFINE_TEST()</a>.</p>
<div class="fragment"><div class="line">                                                    {</div>
<div class="line">                        <a class="code" href="lru__cache_8h.xhtml#a7a1d17c8eef1fd310a6522744483ae52" title="If we are reentrant then use a BOOST scoped mutex where neccessary.">SCOPED_MUTEX</a>;</div>
<div class="line">                        _touch( key );</div>
<div class="line">                }</div>
</div><!-- fragment -->
<p><div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classLRUCache_a844206e9e2fde04aaf11c638725f2c29_icgraph.svg" width="299" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a8531c23ed890dac39debfb9f878cab9d"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class Data , class Sizefn  = Countfn&lt; Data &gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Data* <a class="el" href="classLRUCache.xhtml">LRUCache</a>&lt; Key, Data, Sizefn &gt;::fetch_ptr </td>
          <td>(</td>
          <td class="paramtype">const Key &amp;&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>touch</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Fetches a pointer to cache data. </p>
<dl class="params"><dt>Parameters:</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>to fetch data for </td></tr>
    <tr><td class="paramname">touch</td><td>whether or not to touch the data </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns:</dt><dd>pointer to data or NULL on error </dd></dl>

<p>Definition at line <a class="el" href="lru__cache_8h_source.xhtml#l00166">166</a> of file <a class="el" href="lru__cache_8h_source.xhtml">lru_cache.h</a>.</p>

<p>References <a class="el" href="lru__cache_8h_source.xhtml#l00052">SCOPED_MUTEX</a>.</p>

<p>Referenced by <a class="el" href="lru__cache_8cpp_source.xhtml#l00143">DEFINE_TEST()</a>.</p>
<div class="fragment"><div class="line">                                                                            {</div>
<div class="line">                        <a class="code" href="lru__cache_8h.xhtml#a7a1d17c8eef1fd310a6522744483ae52" title="If we are reentrant then use a BOOST scoped mutex where neccessary.">SCOPED_MUTEX</a>;</div>
<div class="line">                        <a class="code" href="classLRUCache.xhtml#aa95c01d582d31a9295b84caf12d42ef4" title="Index iterator.">Map_Iter</a> miter = _index.find( key );</div>
<div class="line">                        <span class="keywordflow">if</span>( miter == _index.end() ) <span class="keywordflow">return</span> NULL;</div>
<div class="line">                        _touch( key );</div>
<div class="line">                        <span class="keywordflow">return</span> &amp;(miter-&gt;second-&gt;second);</div>
<div class="line">                }</div>
</div><!-- fragment -->
<p><div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classLRUCache_a8531c23ed890dac39debfb9f878cab9d_icgraph.svg" width="318" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a5896c9481fb649f5570fb8677c33b49c"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class Data , class Sizefn  = Countfn&lt; Data &gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Data <a class="el" href="classLRUCache.xhtml">LRUCache</a>&lt; Key, Data, Sizefn &gt;::fetch </td>
          <td>(</td>
          <td class="paramtype">const Key &amp;&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>touch_data</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Fetches a copy of cached data. </p>
<dl class="params"><dt>Parameters:</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>to fetch data for </td></tr>
    <tr><td class="paramname">touch_data</td><td>whether or not to touch the data </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns:</dt><dd>copy of the data or an empty Data object if not found </dd></dl>

<p>Definition at line <a class="el" href="lru__cache_8h_source.xhtml#l00179">179</a> of file <a class="el" href="lru__cache_8h_source.xhtml">lru_cache.h</a>.</p>

<p>References <a class="el" href="lru__cache_8h_source.xhtml#l00052">SCOPED_MUTEX</a>.</p>

<p>Referenced by <a class="el" href="lru__cache_8cpp_source.xhtml#l00050">DEFINE_TEST()</a>, and <a class="el" href="lru__cache_8cpp_source.xhtml#l00031">dump()</a>.</p>
<div class="fragment"><div class="line">                                                                            {</div>
<div class="line">                        <a class="code" href="lru__cache_8h.xhtml#a7a1d17c8eef1fd310a6522744483ae52" title="If we are reentrant then use a BOOST scoped mutex where neccessary.">SCOPED_MUTEX</a>;</div>
<div class="line">                        <a class="code" href="classLRUCache.xhtml#aa95c01d582d31a9295b84caf12d42ef4" title="Index iterator.">Map_Iter</a> miter = _index.find( key );</div>
<div class="line">                        <span class="keywordflow">if</span>( miter == _index.end() )</div>
<div class="line">                                <span class="keywordflow">return</span> Data();</div>
<div class="line">                        Data tmp = miter-&gt;second-&gt;second;</div>
<div class="line">                        <span class="keywordflow">if</span>( touch_data )</div>
<div class="line">                                _touch( key );</div>
<div class="line">                        <span class="keywordflow">return</span> tmp;</div>
<div class="line">                }</div>
</div><!-- fragment -->
<p><div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classLRUCache_a5896c9481fb649f5570fb8677c33b49c_icgraph.svg" width="398" height="63"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a85c5cb904b7c8ed7f85a6a7162740aa5"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class Data , class Sizefn  = Countfn&lt; Data &gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classLRUCache.xhtml">LRUCache</a>&lt; Key, Data, Sizefn &gt;::fetch </td>
          <td>(</td>
          <td class="paramtype">const Key &amp;&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Data &amp;&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>touch_data</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Fetches a pointer to cache data. </p>
<dl class="params"><dt>Parameters:</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>to fetch data for </td></tr>
    <tr><td class="paramname">data</td><td>to fetch data into </td></tr>
    <tr><td class="paramname">touch_data</td><td>whether or not to touch the data </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns:</dt><dd>whether or not data was filled in </dd></dl>

<p>Definition at line <a class="el" href="lru__cache_8h_source.xhtml#l00196">196</a> of file <a class="el" href="lru__cache_8h_source.xhtml">lru_cache.h</a>.</p>

<p>References <a class="el" href="lru__cache_8h_source.xhtml#l00052">SCOPED_MUTEX</a>.</p>
<div class="fragment"><div class="line">                                                                                        {</div>
<div class="line">                        <a class="code" href="lru__cache_8h.xhtml#a7a1d17c8eef1fd310a6522744483ae52" title="If we are reentrant then use a BOOST scoped mutex where neccessary.">SCOPED_MUTEX</a>;</div>
<div class="line">                        <a class="code" href="classLRUCache.xhtml#aa95c01d582d31a9295b84caf12d42ef4" title="Index iterator.">Map_Iter</a> miter = _index.find( key );</div>
<div class="line">                        <span class="keywordflow">if</span>( miter == _index.end() ) <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line">                        <span class="keywordflow">if</span>( touch_data )</div>
<div class="line">                          _list.splice( _list.begin(), _list, miter-&gt;second ); <span class="comment">// Do a touch inline.</span></div>
<div class="line">                        data = miter-&gt;second-&gt;second;</div>
<div class="line">                        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line">                }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a47523c87a56e9bd718566b2659366fd1"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class Data , class Sizefn  = Countfn&lt; Data &gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classLRUCache.xhtml">LRUCache</a>&lt; Key, Data, Sizefn &gt;::insert </td>
          <td>(</td>
          <td class="paramtype">const Key &amp;&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const Data &amp;&#160;</td>
          <td class="paramname"><em>data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Inserts a key-data pair into the cache and removes entries if neccessary. </p>
<dl class="params"><dt>Parameters:</dt><dd>
  <table class="params">
    <tr><td class="paramname">key</td><td>object key for insertion </td></tr>
    <tr><td class="paramname">data</td><td>object data for insertion </td></tr>
  </table>
  </dd>
</dl>
<dl class="section note"><dt>Note:</dt><dd>This function checks key existance and touches the key if it already exists. </dd></dl>

<p>Definition at line <a class="el" href="lru__cache_8h_source.xhtml#l00211">211</a> of file <a class="el" href="lru__cache_8h_source.xhtml">lru_cache.h</a>.</p>

<p>References <a class="el" href="lru__cache_8h_source.xhtml#l00052">SCOPED_MUTEX</a>.</p>

<p>Referenced by <a class="el" href="lru__cache_8cpp_source.xhtml#l00050">DEFINE_TEST()</a>.</p>
<div class="fragment"><div class="line">                                                                       {</div>
<div class="line">                        <a class="code" href="lru__cache_8h.xhtml#a7a1d17c8eef1fd310a6522744483ae52" title="If we are reentrant then use a BOOST scoped mutex where neccessary.">SCOPED_MUTEX</a>;</div>
<div class="line">                        <span class="comment">// Touch the key, if it exists, then replace the content.</span></div>
<div class="line">                        <a class="code" href="classLRUCache.xhtml#aa95c01d582d31a9295b84caf12d42ef4" title="Index iterator.">Map_Iter</a> miter = _touch( key );</div>
<div class="line">                        <span class="keywordflow">if</span>( miter != _index.end() )</div>
<div class="line">                                _remove( miter );</div>
<div class="line"></div>
<div class="line">                        <span class="comment">// Ok, do the actual insert at the head of the list</span></div>
<div class="line">                        _list.push_front( std::make_pair( key, data ) );</div>
<div class="line">                        <a class="code" href="classLRUCache.xhtml#a3c656ba5944009b260049c8a67e42037" title="Main cache iterator.">List_Iter</a> liter = _list.begin();</div>
<div class="line"></div>
<div class="line">                        <span class="comment">// Store the index</span></div>
<div class="line">                        _index.insert( std::make_pair( key, liter ) );</div>
<div class="line">                        _curr_size += Sizefn()( data );</div>
<div class="line"></div>
<div class="line">                        <span class="comment">// Check to see if we need to remove an element due to exceeding max_size</span></div>
<div class="line">                        <span class="keywordflow">while</span>( _curr_size &gt; _max_size ) {</div>
<div class="line">                                <span class="comment">// Remove the last element.</span></div>
<div class="line">                                liter = _list.end();</div>
<div class="line">                                --liter;</div>
<div class="line">                                _remove( liter-&gt;first );</div>
<div class="line">                        }</div>
<div class="line">                }</div>
</div><!-- fragment -->
<p><div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classLRUCache_a47523c87a56e9bd718566b2659366fd1_icgraph.svg" width="299" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a3ca261ee9025168c081883b6dacc4131"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class Key , class Data , class Sizefn  = Countfn&lt; Data &gt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classLRUCache.xhtml#aaa32d864b92c5bb8df559b363a69cf21">Key_List</a> <a class="el" href="classLRUCache.xhtml">LRUCache</a>&lt; Key, Data, Sizefn &gt;::get_all_keys </td>
          <td>(</td>
          <td class="paramtype">void&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get a list of keys. </p>
<dl class="section return"><dt>Returns:</dt><dd>list of the current keys. </dd></dl>

<p>Definition at line <a class="el" href="lru__cache_8h_source.xhtml#l00238">238</a> of file <a class="el" href="lru__cache_8h_source.xhtml">lru_cache.h</a>.</p>

<p>References <a class="el" href="lru__cache_8h_source.xhtml#l00052">SCOPED_MUTEX</a>.</p>

<p>Referenced by <a class="el" href="lru__cache_8cpp_source.xhtml#l00031">dump()</a>.</p>
<div class="fragment"><div class="line">                                                           {</div>
<div class="line">                        <a class="code" href="lru__cache_8h.xhtml#a7a1d17c8eef1fd310a6522744483ae52" title="If we are reentrant then use a BOOST scoped mutex where neccessary.">SCOPED_MUTEX</a>;</div>
<div class="line">                        <a class="code" href="classLRUCache.xhtml#aaa32d864b92c5bb8df559b363a69cf21" title="List of keys.">Key_List</a> ret;</div>
<div class="line">                        <span class="keywordflow">for</span>( <a class="code" href="classLRUCache.xhtml#a7a9d5fc54bec471ff96c5aefab17acf9" title="Main cache iterator (const)">List_cIter</a> liter = _list.begin(); liter != _list.end(); liter++ )</div>
<div class="line">                                ret.push_back( liter-&gt;first );</div>
<div class="line">                        <span class="keywordflow">return</span> ret;</div>
<div class="line">                }</div>
</div><!-- fragment -->
<p><div class="dynheader">
Here is the caller graph for this function:</div>
<div class="dyncontent">
<div class="center"><iframe scrolling="no" frameborder="0" src="classLRUCache_a3ca261ee9025168c081883b6dacc4131_icgraph.svg" width="443" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="lru__cache_8h_source.xhtml">lru_cache.h</a></li>
<li><a class="el" href="lru__cache__unit_8cpp_source.xhtml">lru_cache_unit.cpp</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="classLRUCache.xhtml">LRUCache</a></li>
    <li class="footer">Generated on Sun Jun 10 2012 22:36:56 for C++ LRU Cache Template by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.1 </li>
  </ul>
</div>
</body>
</html>
